#!/bin/bash

# Parallel Pokémon Data Fetching Script
# Fetches data for multiple Pokémon in parallel using background processes
# Includes proper process management and synchronization

# Configuration
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
ERROR_LOG="parallel_errors.txt"
PROGRESS_DIR="progress"
MAX_CONCURRENT=5
PID_FILE="pokemon_pids.txt"

# Create necessary directories
create_directories() {
    for dir in "$OUTPUT_DIR" "$PROGRESS_DIR"; do
        if [ ! -d "$dir" ]; then
            mkdir -p "$dir"
            if [ $? -ne 0 ]; then
                echo "Error: Failed to create directory $dir"
                exit 1
            fi
        fi
    done
}

# Function to log errors with timestamp and process info
log_error() {
    local pokemon="$1"
    local error_msg="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PID: $$] [$pokemon] ERROR: $error_msg" >> "$ERROR_LOG"
}

# Function to log progress
log_progress() {
    local pokemon="$1"
    local status="$2"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [PID: $$] [$pokemon] $status" > "$PROGRESS_DIR/${pokemon}.status"
}

# Function to fetch data for a single Pokémon (runs in background)
fetch_pokemon_data_parallel() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local api_url="${API_BASE_URL}/${pokemon_name}"
    local success_file="$PROGRESS_DIR/${pokemon_name}.success"
    local error_file="$PROGRESS_DIR/${pokemon_name}.error"
    
    # Clean up any previous status files
    rm -f "$success_file" "$error_file"
    
    log_progress "$pokemon_name" "Starting fetch process"
    
    # Make API request with error handling
    local response
    local http_code
    local curl_exit_code
    
    # Use curl to fetch data with timeouts
    response=$(curl -s -S -f -w "%{http_code}" --connect-timeout 10 --max-time 30 "$api_url" 2>/dev/null)
    curl_exit_code=$?
    
    # Extract HTTP code (last 3 characters)
    http_code="${response: -3}"
    # Extract JSON response (everything except last 3 characters)
    local json_response="${response%???}"
    
    # Check if curl command succeeded
    if [ $curl_exit_code -ne 0 ]; then
        local error_msg="Curl failed with exit code: $curl_exit_code"
        log_error "$pokemon_name" "$error_msg"
        log_progress "$pokemon_name" "FAILED - $error_msg"
        touch "$error_file"
        return 1
    fi
    
    # Check HTTP status code
    if [ "$http_code" -ne 200 ]; then
        local error_msg="HTTP error - status code: $http_code"
        log_error "$pokemon_name" "$error_msg"
        log_progress "$pokemon_name" "FAILED - $error_msg"
        touch "$error_file"
        return 1
    fi
    
    # Validate JSON response if jq is available
    if command -v jq >/dev/null 2>&1; then
        if ! echo "$json_response" | jq . >/dev/null 2>&1; then
            local error_msg="Invalid JSON response"
            log_error "$pokemon_name" "$error_msg"
            log_progress "$pokemon_name" "FAILED - $error_msg"
            touch "$error_file"
            return 1
        fi
    fi
    
    # Save the JSON response to file
    echo "$json_response" > "$output_file"
    
    if [ $? -eq 0 ]; then
        log_progress "$pokemon_name" "SUCCESS - Data saved to $output_file"
        touch "$success_file"
        return 0
    else
        local error_msg="Failed to write data to file"
        log_error "$pokemon_name" "$error_msg"
        log_progress "$pokemon_name" "FAILED - $error_msg"
        touch "$error_file"
        return 1
    fi
}

# Function to start background processes
start_parallel_fetching() {
    local pids=()
    
    echo "Starting parallel data fetching for ${#POKEMON_LIST[@]} Pokémon..."
    echo "Max concurrent processes: $MAX_CONCURRENT"
    echo ""
    
    # Clear PID file
    > "$PID_FILE"
    
    # Start background processes for each Pokémon
    for pokemon in "${POKEMON_LIST[@]}"; do
        # Convert to lowercase for API consistency
        pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
        
        echo "Starting background process for $pokemon_lower..."
        
        # Start the fetch function in background
        fetch_pokemon_data_parallel "$pokemon_lower" &
        local pid=$!
        
        # Store PID
        pids+=($pid)
        echo "$pid:$pokemon_lower" >> "$PID_FILE"
        
        echo "  → Process started with PID: $pid"
        
        # Use jobs command to display current background jobs
        echo "  → Current background jobs:"
        jobs -l | tail -n 1
        
        # If we've reached max concurrent processes, wait for one to finish
        if [ ${#pids[@]} -ge $MAX_CONCURRENT ]; then
            echo "  → Max concurrent processes reached, waiting for completion..."
            echo "  → Active jobs count: $(jobs -r | wc -l)"
            wait_for_any_process "${pids[@]}"
            # Remove completed processes from array
            pids=($(get_running_processes "${pids[@]}"))
        fi
    done
    
    echo ""
    echo "All background processes started. Total PIDs: ${#pids[@]}"
    echo "Total background jobs: $(jobs | wc -l)"
    echo "Running background jobs: $(jobs -r | wc -l)"
    
    # Display all current jobs
    echo ""
    echo "Current background jobs status:"
    jobs -l
    
    return 0
}

# Function to check if a process is still running
is_process_running() {
    local pid="$1"
    kill -0 "$pid" 2>/dev/null
    return $?
}

# Function to get list of still running processes using jobs
get_running_processes() {
    local all_pids=("$@")
    local running_pids=()
    
    # Use jobs command to check running background processes
    local job_count=$(jobs -r | wc -l)
    
    for pid in "${all_pids[@]}"; do
        if is_process_running "$pid"; then
            running_pids+=($pid)
        fi
    done
    
    echo "${running_pids[@]}"
}

# Function to monitor background jobs
monitor_background_jobs() {
    echo "Monitoring background jobs..."
    
    # Display current running jobs
    local running_jobs=$(jobs -r)
    local stopped_jobs=$(jobs -s)
    
    if [ -n "$running_jobs" ]; then
        echo "Running background jobs:"
        jobs -r
    fi
    
    if [ -n "$stopped_jobs" ]; then
        echo "Stopped background jobs:"
        jobs -s
    fi
    
    local job_count=$(jobs | wc -l)
    echo "Total background jobs: $job_count"
}

# Function to wait for any process to complete
wait_for_any_process() {
    local pids=("$@")
    
    while [ ${#pids[@]} -gt 0 ]; do
        sleep 0.5
        local new_pids=()
        
        for pid in "${pids[@]}"; do
            if is_process_running "$pid"; then
                new_pids+=($pid)
            else
                echo "  → Process $pid completed"
                return 0
            fi
        done
        
        pids=("${new_pids[@]}")
    done
}

# Function to wait for all processes to complete using jobs
wait_for_all_processes() {
    echo "Waiting for all background processes to complete..."
    
    # Monitor jobs status
    monitor_background_jobs
    
    if [ ! -f "$PID_FILE" ]; then
        echo "No PID file found"
        return 1
    fi
    
    local total_processes=$(wc -l < "$PID_FILE")
    local completed=0
    
    # Use jobs command to monitor background processes
    echo "Using jobs command to manage background processes..."
    
    # Read PIDs from file and wait for each
    while IFS=':' read -r pid pokemon_name; do
        if [ -n "$pid" ] && [ -n "$pokemon_name" ]; then
            echo "Waiting for $pokemon_name (PID: $pid)..."
            
            # Check if job is still running using jobs
            local job_running=false
            if jobs -r | grep -q "$pid" 2>/dev/null; then
                job_running=true
            fi
            
            # Wait for specific process
            if is_process_running "$pid"; then
                echo "  → Job is active, waiting for completion..."
                wait "$pid" 2>/dev/null
                local exit_code=$?
                
                if [ $exit_code -eq 0 ]; then
                    echo "  ✅ $pokemon_name completed successfully"
                else
                    echo "  ❌ $pokemon_name failed (exit code: $exit_code)"
                fi
            else
                echo "  ✅ $pokemon_name already completed"
            fi
            
            completed=$((completed + 1))
            echo "  Progress: $completed/$total_processes processes completed"
            
            # Show remaining jobs
            local remaining_jobs=$(jobs -r | wc -l)
            echo "  Remaining background jobs: $remaining_jobs"
        fi
    done < "$PID_FILE"
    
    # Final jobs check
    echo ""
    echo "Final background jobs status:"
    jobs
    
    # Wait for any remaining jobs
    local remaining=$(jobs -r | wc -l)
    if [ "$remaining" -gt 0 ]; then
        echo "Waiting for remaining $remaining background jobs to complete..."
        wait  # Wait for all remaining background jobs
    fi
    
    echo ""
    echo "All background processes and jobs have completed!"
    return 0
}

# Function to display real-time progress
show_progress() {
    echo "Monitoring progress..."
    echo "Press Ctrl+C to stop monitoring (processes will continue)"
    
    local total=${#POKEMON_LIST[@]}
    
    while true; do
        local completed=0
        local failed=0
        local running=0
        
        echo -ne "\rProgress: "
        
        for pokemon in "${POKEMON_LIST[@]}"; do
            pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
            
            if [ -f "$PROGRESS_DIR/${pokemon_lower}.success" ]; then
                echo -ne "✅"
                completed=$((completed + 1))
            elif [ -f "$PROGRESS_DIR/${pokemon_lower}.error" ]; then
                echo -ne "❌"
                failed=$((failed + 1))
            else
                echo -ne "⏳"
                running=$((running + 1))
            fi
        done
        
        echo -ne " | Completed: $completed | Failed: $failed | Running: $running     "
        
        # Check if all are done
        if [ $((completed + failed)) -eq $total ]; then
            echo ""
            break
        fi
        
        sleep 1
    done
}

# Function to generate final summary
generate_summary() {
    echo ""
    echo "=========================================="
    echo "Parallel Processing Summary:"
    echo "=========================================="
    
    local total=${#POKEMON_LIST[@]}
    local successful=0
    local failed=0
    
    echo "Individual Results:"
    for pokemon in "${POKEMON_LIST[@]}"; do
        pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
        pokemon_cap=$(echo "$pokemon_lower" | awk '{print toupper(substr($0,1,1)) tolower(substr($0,2))}')
        
        if [ -f "$PROGRESS_DIR/${pokemon_lower}.success" ]; then
            echo "  ✅ $pokemon_cap - Success"
            successful=$((successful + 1))
        elif [ -f "$PROGRESS_DIR/${pokemon_lower}.error" ]; then
            echo "  ❌ $pokemon_cap - Failed"
            failed=$((failed + 1))
        else
            echo "  ❓ $pokemon_cap - Unknown status"
            failed=$((failed + 1))
        fi
    done
    
    echo ""
    echo "Statistics:"
    echo "  Total Pokémon: $total"
    echo "  Successfully fetched: $successful"
    echo "  Failed: $failed"
    echo "  Success rate: $(( successful * 100 / total ))%"
    
    if [ -f "$ERROR_LOG" ] && [ -s "$ERROR_LOG" ]; then
        local error_count=$(wc -l < "$ERROR_LOG")
        echo "  Total errors logged: $error_count"
        echo "  Error log: $ERROR_LOG"
    fi
    
    echo "  Output directory: $OUTPUT_DIR"
    echo "=========================================="
}

# Function to cleanup temporary files
cleanup() {
    echo "Cleaning up temporary files..."
    rm -f "$PID_FILE"
    rm -rf "$PROGRESS_DIR"
}

# Signal handler for graceful shutdown
handle_signal() {
    echo ""
    echo "Received interrupt signal. Cleaning up..."
    
    # Display current jobs before cleanup
    echo "Current background jobs:"
    jobs -l
    
    # Kill all background processes using jobs information
    if [ -f "$PID_FILE" ]; then
        while IFS=':' read -r pid pokemon_name; do
            if [ -n "$pid" ] && is_process_running "$pid"; then
                echo "Terminating process $pid ($pokemon_name)..."
                kill "$pid" 2>/dev/null
            fi
        done < "$PID_FILE"
    fi
    
    # Wait a moment for processes to terminate
    sleep 1
    
    # Check remaining jobs
    local remaining_jobs=$(jobs -r | wc -l)
    if [ "$remaining_jobs" -gt 0 ]; then
        echo "Force killing remaining $remaining_jobs background jobs..."
        jobs -p | xargs -r kill -9 2>/dev/null
    fi
    
    cleanup
    exit 130
}

# Main execution function
main() {
    echo "Parallel Pokémon Data Fetching"
    echo "=============================="
    echo "Target Pokémon: ${POKEMON_LIST[*]}"
    echo ""
    
    # Set up signal handlers
    trap handle_signal INT TERM
    
    # Check dependencies
    if ! command -v curl >/dev/null 2>&1; then
        echo "Error: curl is required but not found. Please install curl."
        exit 1
    fi
    
    # Create necessary directories
    create_directories
    
    # Clear previous logs
    > "$ERROR_LOG"
    
    # Record start time
    local start_time=$(date +%s)
    
    # Start parallel fetching
    start_parallel_fetching
    
    # Show progress in background and wait for completion
    show_progress &
    local progress_pid=$!
    
    # Wait for all processes to complete
    wait_for_all_processes
    
    # Stop progress monitoring
    kill "$progress_pid" 2>/dev/null
    wait "$progress_pid" 2>/dev/null
    
    # Calculate execution time
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    # Generate summary
    generate_summary
    
    echo "Execution time: ${duration} seconds"
    
    # Cleanup
    cleanup
    
    # Exit with appropriate code
    local successful_files=$(ls -1 "$OUTPUT_DIR"/*.json 2>/dev/null | wc -l)
    local total_files=${#POKEMON_LIST[@]}
    
    if [ "$successful_files" -eq "$total_files" ]; then
        echo ""
        echo "🎉 All Pokémon data retrieved successfully!"
        exit 0
    elif [ "$successful_files" -gt 0 ]; then
        echo ""
        echo "⚠️  Partial success: $successful_files/$total_files Pokémon retrieved."
        exit 2
    else
        echo ""
        echo "❌ Failed to retrieve any Pokémon data."
        exit 1
    fi
}

# Run the main function
main "$@"