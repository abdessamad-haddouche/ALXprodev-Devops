#!/bin/bash

# Batch Pokémon Data Retrieval Script with Retry Logic
# Fetches data for multiple Pokémon and saves to separate files
# Handles rate limiting with delays between requests
# Includes robust error handling and retry mechanism

# Configuration
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
DELAY_SECONDS=1
ERROR_LOG="batch_errors.txt"
MAX_RETRIES=3
RETRY_DELAY=2

# Create output directory if it doesn't exist
create_output_dir() {
    if [ ! -d "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to create directory $OUTPUT_DIR"
            exit 1
        fi
    fi
}

# Function to log errors with timestamp
log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> "$ERROR_LOG"
}

# Function to fetch data for a single Pokémon with retry logic
fetch_pokemon_data() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local api_url="${API_BASE_URL}/${pokemon_name}"
    local attempt=1
    
    echo "Fetching data for ${pokemon_name}..."
    
    # Retry loop - attempt up to MAX_RETRIES times
    while [ $attempt -le $MAX_RETRIES ]; do
        local response
        local http_code
        local curl_exit_code
        
        # Make API request with comprehensive error handling
        response=$(curl -s -S -f -w "%{http_code}" --connect-timeout 10 --max-time 30 "$api_url" 2>/dev/null)
        curl_exit_code=$?
        
        # Extract HTTP code (last 3 characters)
        http_code="${response: -3}"
        # Extract JSON response (everything except last 3 characters)
        local json_response="${response%???}"
        
        # Check different types of errors and handle accordingly
        case $curl_exit_code in
            0)
                # Success - check HTTP status code
                if [ "$http_code" -eq 200 ]; then
                    # Validate JSON response if jq is available
                    if command -v jq >/dev/null 2>&1; then
                        if ! echo "$json_response" | jq . >/dev/null 2>&1; then
                            log_error "Invalid JSON response for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                            echo "⚠️  Invalid JSON response for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                        else
                            # Valid JSON - save to file
                            echo "$json_response" > "$output_file"
                            if [ $? -eq 0 ]; then
                                echo "Saved data to $output_file ✅"
                                return 0
                            else
                                log_error "Failed to write data to $output_file for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                                echo "⚠️  Failed to save data for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                            fi
                        fi
                    else
                        # No jq available - save response as is
                        echo "$json_response" > "$output_file"
                        if [ $? -eq 0 ]; then
                            echo "Saved data to $output_file ✅"
                            return 0
                        else
                            log_error "Failed to write data to $output_file for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                            echo "⚠️  Failed to save data for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                        fi
                    fi
                elif [ "$http_code" -eq 404 ]; then
                    # Pokemon not found - don't retry
                    log_error "Pokémon '$pokemon_name' not found (HTTP 404) - skipping retries"
                    echo "❌ Pokémon '$pokemon_name' not found"
                    return 1
                elif [ "$http_code" -eq 429 ]; then
                    # Rate limited - longer delay before retry
                    log_error "Rate limited for $pokemon_name (HTTP 429) - attempt $attempt/$MAX_RETRIES"
                    echo "⚠️  Rate limited for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                    if [ $attempt -lt $MAX_RETRIES ]; then
                        echo "   Waiting longer before retry due to rate limiting..."
                        sleep $((RETRY_DELAY * 2))
                    fi
                else
                    # Other HTTP errors
                    log_error "HTTP error $http_code for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                    echo "⚠️  HTTP error $http_code for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                fi
                ;;
            6)
                # DNS resolution failed
                log_error "DNS resolution failed for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                echo "⚠️  DNS resolution failed for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                ;;
            7)
                # Connection failed
                log_error "Connection failed for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                echo "⚠️  Connection failed for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                ;;
            28)
                # Timeout
                log_error "Request timeout for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                echo "⚠️  Request timeout for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                ;;
            *)
                # Other curl errors
                log_error "Curl error (code: $curl_exit_code) for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                echo "⚠️  Network error for $pokemon_name (attempt $attempt/$MAX_RETRIES)"
                ;;
        esac
        
        # Increment attempt counter
        attempt=$((attempt + 1))
        
        # Wait before retry (except for the last attempt)
        if [ $attempt -le $MAX_RETRIES ]; then
            echo "   Retrying in $RETRY_DELAY seconds..."
            sleep $RETRY_DELAY
        fi
    done
    
    # All retries exhausted
    log_error "All $MAX_RETRIES attempts failed for $pokemon_name - giving up"
    echo "❌ Failed to fetch data for $pokemon_name after $MAX_RETRIES attempts"
    return 1
}

# Function to display summary
display_summary() {
    local total_pokemon=${#POKEMON_LIST[@]}
    local successful_files=$(ls -1 "$OUTPUT_DIR"/*.json 2>/dev/null | wc -l)
    local failed_count=$((total_pokemon - successful_files))
    
    echo ""
    echo "=========================================="
    echo "Batch Processing Summary:"
    echo "Total Pokémon: $total_pokemon"
    echo "Successfully fetched: $successful_files"
    echo "Failed: $failed_count"
    
    if [ -f "$ERROR_LOG" ]; then
        local error_count=$(wc -l < "$ERROR_LOG")
        if [ "$error_count" -gt 0 ]; then
            echo "Total errors logged: $error_count (see $ERROR_LOG)"
            echo ""
            echo "Recent errors:"
            tail -n 3 "$ERROR_LOG" | sed 's/^/  /'
        fi
    fi
    
    echo "Output directory: $OUTPUT_DIR"
    echo "Max retries per Pokémon: $MAX_RETRIES"
    echo "Retry delay: $RETRY_DELAY seconds"
    echo "=========================================="
}

# Main execution function
main() {
    echo "Batch Pokémon Data Retrieval with Retry Logic"
    echo "============================================="
    echo "Max retries per request: $MAX_RETRIES"
    echo "Retry delay: $RETRY_DELAY seconds"
    echo "Rate limiting delay: $DELAY_SECONDS seconds"
    echo ""
    
    # Check if curl is available
    if ! command -v curl >/dev/null 2>&1; then
        echo "Error: curl is required but not found. Please install curl."
        exit 1
    fi
    
    # Create output directory
    create_output_dir
    
    # Clear previous error log
    > "$ERROR_LOG"
    
    # Initialize counters
    local success_count=0
    local total_count=${#POKEMON_LIST[@]}
    local retry_count=0
    
    # Process each Pokémon
    for pokemon in "${POKEMON_LIST[@]}"; do
        # Convert to lowercase for API consistency
        pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
        
        # Fetch data with retry logic
        if fetch_pokemon_data "$pokemon_lower"; then
            ((success_count++))
        else
            # Count this as requiring retries (failed after all attempts)
            ((retry_count++))
        fi
        
        # Add delay between requests to handle rate limiting
        # Skip delay for the last request
        if [ "$pokemon" != "${POKEMON_LIST[-1]}" ]; then
            sleep "$DELAY_SECONDS"
        fi
        
        echo ""  # Add spacing between Pokemon processing
    done
    
    # Display summary
    display_summary
    
    # Display retry statistics
    if [ "$retry_count" -gt 0 ]; then
        echo ""
        echo "Retry Statistics:"
        echo "Pokémon requiring retries: $retry_count"
        echo "Check $ERROR_LOG for detailed error information."
    fi
    
    # Exit with appropriate code
    if [ "$success_count" -eq "$total_count" ]; then
        echo ""
        echo "✅ All Pokémon data retrieved successfully!"
        exit 0
    elif [ "$success_count" -gt 0 ]; then
        echo ""
        echo "⚠️  Partial success: $success_count/$total_count Pokémon retrieved successfully."
        exit 2
    else
        echo ""
        echo "❌ Failed to retrieve any Pokémon data. Check network connection and $ERROR_LOG."
        exit 1
    fi
}

# Run the main function
main "$@"