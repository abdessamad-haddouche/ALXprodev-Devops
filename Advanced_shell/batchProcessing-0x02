#!/bin/bash

# Batch Pokémon Data Retrieval Script
# Fetches data for multiple Pokémon and saves to separate files
# Handles rate limiting with delays between requests

# Configuration
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE_URL="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
DELAY_SECONDS=1
ERROR_LOG="batch_errors.txt"

# Create output directory if it doesn't exist
create_output_dir() {
    if [ ! -d "$OUTPUT_DIR" ]; then
        mkdir -p "$OUTPUT_DIR"
        if [ $? -ne 0 ]; then
            echo "Error: Failed to create directory $OUTPUT_DIR"
            exit 1
        fi
    fi
}

# Function to log errors with timestamp
log_error() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> "$ERROR_LOG"
}

# Function to fetch data for a single Pokémon
fetch_pokemon_data() {
    local pokemon_name="$1"
    local output_file="$OUTPUT_DIR/${pokemon_name}.json"
    local api_url="${API_BASE_URL}/${pokemon_name}"
    
    echo "Fetching data for ${pokemon_name}..."
    
    # Make API request with error handling
    local response
    local http_code
    
    # Use curl to fetch data
    response=$(curl -s -S -f -w "%{http_code}" "$api_url" 2>/dev/null)
    local curl_exit_code=$?
    
    # Extract HTTP code (last 3 characters)
    http_code="${response: -3}"
    # Extract JSON response (everything except last 3 characters)
    local json_response="${response%???}"
    
    # Check if curl command succeeded
    if [ $curl_exit_code -ne 0 ]; then
        log_error "Failed to fetch data for $pokemon_name - curl exit code: $curl_exit_code"
        echo "❌ Failed to fetch data for $pokemon_name"
        return 1
    fi
    
    # Check HTTP status code
    if [ "$http_code" -ne 200 ]; then
        log_error "HTTP error for $pokemon_name - status code: $http_code"
        echo "❌ Failed to fetch data for $pokemon_name (HTTP $http_code)"
        return 1
    fi
    
    # Validate JSON response if jq is available
    if command -v jq >/dev/null 2>&1; then
        if ! echo "$json_response" | jq . >/dev/null 2>&1; then
            log_error "Invalid JSON response for $pokemon_name"
            echo "❌ Invalid JSON response for $pokemon_name"
            return 1
        fi
    fi
    
    # Save the JSON response to file
    echo "$json_response" > "$output_file"
    
    if [ $? -eq 0 ]; then
        echo "Saved data to $output_file ✅"
        return 0
    else
        log_error "Failed to write data to $output_file for $pokemon_name"
        echo "❌ Failed to save data for $pokemon_name"
        return 1
    fi
}

# Function to display summary
display_summary() {
    local total_pokemon=${#POKEMON_LIST[@]}
    local successful_files=$(ls -1 "$OUTPUT_DIR"/*.json 2>/dev/null | wc -l)
    
    echo ""
    echo "=========================================="
    echo "Batch Processing Summary:"
    echo "Total Pokémon: $total_pokemon"
    echo "Successfully fetched: $successful_files"
    echo "Failed: $((total_pokemon - successful_files))"
    
    if [ -f "$ERROR_LOG" ]; then
        local error_count=$(wc -l < "$ERROR_LOG")
        if [ "$error_count" -gt 0 ]; then
            echo "Errors logged: $error_count (see $ERROR_LOG)"
        fi
    fi
    
    echo "Output directory: $OUTPUT_DIR"
    echo "=========================================="
}

# Main execution function
main() {
    echo "Batch Pokémon Data Retrieval"
    echo "============================="
    
    # Check if curl is available
    if ! command -v curl >/dev/null 2>&1; then
        echo "Error: curl is required but not found. Please install curl."
        exit 1
    fi
    
    # Create output directory
    create_output_dir
    
    # Initialize counters
    local success_count=0
    local total_count=${#POKEMON_LIST[@]}
    
    # Process each Pokémon
    for pokemon in "${POKEMON_LIST[@]}"; do
        # Convert to lowercase for API consistency
        pokemon_lower=$(echo "$pokemon" | tr '[:upper:]' '[:lower:]')
        
        # Fetch data
        if fetch_pokemon_data "$pokemon_lower"; then
            ((success_count++))
        fi
        
        # Add delay between requests to handle rate limiting
        # Skip delay for the last request
        if [ "$pokemon" != "${POKEMON_LIST[-1]}" ]; then
            sleep "$DELAY_SECONDS"
        fi
    done
    
    # Display summary
    display_summary
    
    # Exit with appropriate code
    if [ "$success_count" -eq "$total_count" ]; then
        echo "✅ All Pokémon data retrieved successfully!"
        exit 0
    else
        echo "⚠️  Some Pokémon data could not be retrieved. Check $ERROR_LOG for details."
        exit 1
    fi
}

# Run the main function
main "$@"